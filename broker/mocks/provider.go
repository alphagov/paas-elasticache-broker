// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/alphagov/paas-elasticache-broker/broker"
)

type FakeProvider struct {
	ProvisionStub        func(ctx context.Context, instanceID string, params broker.ProvisionParameters) error
	provisionMutex       sync.RWMutex
	provisionArgsForCall []struct {
		ctx        context.Context
		instanceID string
		params     broker.ProvisionParameters
	}
	provisionReturns struct {
		result1 error
	}
	provisionReturnsOnCall map[int]struct {
		result1 error
	}
	DeprovisionStub        func(ctx context.Context, instanceID string, params broker.DeprovisionParameters) error
	deprovisionMutex       sync.RWMutex
	deprovisionArgsForCall []struct {
		ctx        context.Context
		instanceID string
		params     broker.DeprovisionParameters
	}
	deprovisionReturns struct {
		result1 error
	}
	deprovisionReturnsOnCall map[int]struct {
		result1 error
	}
	GetStateStub        func(ctx context.Context, instanceID string) (broker.ServiceState, string, error)
	getStateMutex       sync.RWMutex
	getStateArgsForCall []struct {
		ctx        context.Context
		instanceID string
	}
	getStateReturns struct {
		result1 broker.ServiceState
		result2 string
		result3 error
	}
	getStateReturnsOnCall map[int]struct {
		result1 broker.ServiceState
		result2 string
		result3 error
	}
	GenerateCredentialsStub        func(ctx context.Context, instanceID, bindingID string) (*broker.Credentials, error)
	generateCredentialsMutex       sync.RWMutex
	generateCredentialsArgsForCall []struct {
		ctx        context.Context
		instanceID string
		bindingID  string
	}
	generateCredentialsReturns struct {
		result1 *broker.Credentials
		result2 error
	}
	generateCredentialsReturnsOnCall map[int]struct {
		result1 *broker.Credentials
		result2 error
	}
	RevokeCredentialsStub        func(ctx context.Context, instanceID, bindingID string) error
	revokeCredentialsMutex       sync.RWMutex
	revokeCredentialsArgsForCall []struct {
		ctx        context.Context
		instanceID string
		bindingID  string
	}
	revokeCredentialsReturns struct {
		result1 error
	}
	revokeCredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) Provision(ctx context.Context, instanceID string, params broker.ProvisionParameters) error {
	fake.provisionMutex.Lock()
	ret, specificReturn := fake.provisionReturnsOnCall[len(fake.provisionArgsForCall)]
	fake.provisionArgsForCall = append(fake.provisionArgsForCall, struct {
		ctx        context.Context
		instanceID string
		params     broker.ProvisionParameters
	}{ctx, instanceID, params})
	fake.recordInvocation("Provision", []interface{}{ctx, instanceID, params})
	fake.provisionMutex.Unlock()
	if fake.ProvisionStub != nil {
		return fake.ProvisionStub(ctx, instanceID, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.provisionReturns.result1
}

func (fake *FakeProvider) ProvisionCallCount() int {
	fake.provisionMutex.RLock()
	defer fake.provisionMutex.RUnlock()
	return len(fake.provisionArgsForCall)
}

func (fake *FakeProvider) ProvisionArgsForCall(i int) (context.Context, string, broker.ProvisionParameters) {
	fake.provisionMutex.RLock()
	defer fake.provisionMutex.RUnlock()
	return fake.provisionArgsForCall[i].ctx, fake.provisionArgsForCall[i].instanceID, fake.provisionArgsForCall[i].params
}

func (fake *FakeProvider) ProvisionReturns(result1 error) {
	fake.ProvisionStub = nil
	fake.provisionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) ProvisionReturnsOnCall(i int, result1 error) {
	fake.ProvisionStub = nil
	if fake.provisionReturnsOnCall == nil {
		fake.provisionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.provisionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) Deprovision(ctx context.Context, instanceID string, params broker.DeprovisionParameters) error {
	fake.deprovisionMutex.Lock()
	ret, specificReturn := fake.deprovisionReturnsOnCall[len(fake.deprovisionArgsForCall)]
	fake.deprovisionArgsForCall = append(fake.deprovisionArgsForCall, struct {
		ctx        context.Context
		instanceID string
		params     broker.DeprovisionParameters
	}{ctx, instanceID, params})
	fake.recordInvocation("Deprovision", []interface{}{ctx, instanceID, params})
	fake.deprovisionMutex.Unlock()
	if fake.DeprovisionStub != nil {
		return fake.DeprovisionStub(ctx, instanceID, params)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deprovisionReturns.result1
}

func (fake *FakeProvider) DeprovisionCallCount() int {
	fake.deprovisionMutex.RLock()
	defer fake.deprovisionMutex.RUnlock()
	return len(fake.deprovisionArgsForCall)
}

func (fake *FakeProvider) DeprovisionArgsForCall(i int) (context.Context, string, broker.DeprovisionParameters) {
	fake.deprovisionMutex.RLock()
	defer fake.deprovisionMutex.RUnlock()
	return fake.deprovisionArgsForCall[i].ctx, fake.deprovisionArgsForCall[i].instanceID, fake.deprovisionArgsForCall[i].params
}

func (fake *FakeProvider) DeprovisionReturns(result1 error) {
	fake.DeprovisionStub = nil
	fake.deprovisionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) DeprovisionReturnsOnCall(i int, result1 error) {
	fake.DeprovisionStub = nil
	if fake.deprovisionReturnsOnCall == nil {
		fake.deprovisionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deprovisionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) GetState(ctx context.Context, instanceID string) (broker.ServiceState, string, error) {
	fake.getStateMutex.Lock()
	ret, specificReturn := fake.getStateReturnsOnCall[len(fake.getStateArgsForCall)]
	fake.getStateArgsForCall = append(fake.getStateArgsForCall, struct {
		ctx        context.Context
		instanceID string
	}{ctx, instanceID})
	fake.recordInvocation("GetState", []interface{}{ctx, instanceID})
	fake.getStateMutex.Unlock()
	if fake.GetStateStub != nil {
		return fake.GetStateStub(ctx, instanceID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getStateReturns.result1, fake.getStateReturns.result2, fake.getStateReturns.result3
}

func (fake *FakeProvider) GetStateCallCount() int {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return len(fake.getStateArgsForCall)
}

func (fake *FakeProvider) GetStateArgsForCall(i int) (context.Context, string) {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return fake.getStateArgsForCall[i].ctx, fake.getStateArgsForCall[i].instanceID
}

func (fake *FakeProvider) GetStateReturns(result1 broker.ServiceState, result2 string, result3 error) {
	fake.GetStateStub = nil
	fake.getStateReturns = struct {
		result1 broker.ServiceState
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeProvider) GetStateReturnsOnCall(i int, result1 broker.ServiceState, result2 string, result3 error) {
	fake.GetStateStub = nil
	if fake.getStateReturnsOnCall == nil {
		fake.getStateReturnsOnCall = make(map[int]struct {
			result1 broker.ServiceState
			result2 string
			result3 error
		})
	}
	fake.getStateReturnsOnCall[i] = struct {
		result1 broker.ServiceState
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeProvider) GenerateCredentials(ctx context.Context, instanceID string, bindingID string) (*broker.Credentials, error) {
	fake.generateCredentialsMutex.Lock()
	ret, specificReturn := fake.generateCredentialsReturnsOnCall[len(fake.generateCredentialsArgsForCall)]
	fake.generateCredentialsArgsForCall = append(fake.generateCredentialsArgsForCall, struct {
		ctx        context.Context
		instanceID string
		bindingID  string
	}{ctx, instanceID, bindingID})
	fake.recordInvocation("GenerateCredentials", []interface{}{ctx, instanceID, bindingID})
	fake.generateCredentialsMutex.Unlock()
	if fake.GenerateCredentialsStub != nil {
		return fake.GenerateCredentialsStub(ctx, instanceID, bindingID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateCredentialsReturns.result1, fake.generateCredentialsReturns.result2
}

func (fake *FakeProvider) GenerateCredentialsCallCount() int {
	fake.generateCredentialsMutex.RLock()
	defer fake.generateCredentialsMutex.RUnlock()
	return len(fake.generateCredentialsArgsForCall)
}

func (fake *FakeProvider) GenerateCredentialsArgsForCall(i int) (context.Context, string, string) {
	fake.generateCredentialsMutex.RLock()
	defer fake.generateCredentialsMutex.RUnlock()
	return fake.generateCredentialsArgsForCall[i].ctx, fake.generateCredentialsArgsForCall[i].instanceID, fake.generateCredentialsArgsForCall[i].bindingID
}

func (fake *FakeProvider) GenerateCredentialsReturns(result1 *broker.Credentials, result2 error) {
	fake.GenerateCredentialsStub = nil
	fake.generateCredentialsReturns = struct {
		result1 *broker.Credentials
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) GenerateCredentialsReturnsOnCall(i int, result1 *broker.Credentials, result2 error) {
	fake.GenerateCredentialsStub = nil
	if fake.generateCredentialsReturnsOnCall == nil {
		fake.generateCredentialsReturnsOnCall = make(map[int]struct {
			result1 *broker.Credentials
			result2 error
		})
	}
	fake.generateCredentialsReturnsOnCall[i] = struct {
		result1 *broker.Credentials
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) RevokeCredentials(ctx context.Context, instanceID string, bindingID string) error {
	fake.revokeCredentialsMutex.Lock()
	ret, specificReturn := fake.revokeCredentialsReturnsOnCall[len(fake.revokeCredentialsArgsForCall)]
	fake.revokeCredentialsArgsForCall = append(fake.revokeCredentialsArgsForCall, struct {
		ctx        context.Context
		instanceID string
		bindingID  string
	}{ctx, instanceID, bindingID})
	fake.recordInvocation("RevokeCredentials", []interface{}{ctx, instanceID, bindingID})
	fake.revokeCredentialsMutex.Unlock()
	if fake.RevokeCredentialsStub != nil {
		return fake.RevokeCredentialsStub(ctx, instanceID, bindingID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.revokeCredentialsReturns.result1
}

func (fake *FakeProvider) RevokeCredentialsCallCount() int {
	fake.revokeCredentialsMutex.RLock()
	defer fake.revokeCredentialsMutex.RUnlock()
	return len(fake.revokeCredentialsArgsForCall)
}

func (fake *FakeProvider) RevokeCredentialsArgsForCall(i int) (context.Context, string, string) {
	fake.revokeCredentialsMutex.RLock()
	defer fake.revokeCredentialsMutex.RUnlock()
	return fake.revokeCredentialsArgsForCall[i].ctx, fake.revokeCredentialsArgsForCall[i].instanceID, fake.revokeCredentialsArgsForCall[i].bindingID
}

func (fake *FakeProvider) RevokeCredentialsReturns(result1 error) {
	fake.RevokeCredentialsStub = nil
	fake.revokeCredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) RevokeCredentialsReturnsOnCall(i int, result1 error) {
	fake.RevokeCredentialsStub = nil
	if fake.revokeCredentialsReturnsOnCall == nil {
		fake.revokeCredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.revokeCredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.provisionMutex.RLock()
	defer fake.provisionMutex.RUnlock()
	fake.deprovisionMutex.RLock()
	defer fake.deprovisionMutex.RUnlock()
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	fake.generateCredentialsMutex.RLock()
	defer fake.generateCredentialsMutex.RUnlock()
	fake.revokeCredentialsMutex.RLock()
	defer fake.revokeCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.Provider = new(FakeProvider)
