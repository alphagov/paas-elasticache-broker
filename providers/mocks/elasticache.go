// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/alphagov/paas-elasticache-broker/providers"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
)

type FakeElastiCache struct {
	AddTagsToResourceWithContextStub        func(context.Context, *elasticache.AddTagsToResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	addTagsToResourceWithContextMutex       sync.RWMutex
	addTagsToResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}
	addTagsToResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	addTagsToResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	CreateCacheParameterGroupWithContextStub        func(context.Context, *elasticache.CreateCacheParameterGroupInput, ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupWithContextMutex       sync.RWMutex
	createCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}
	createCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateReplicationGroupWithContextStub        func(context.Context, *elasticache.CreateReplicationGroupInput, ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupWithContextMutex       sync.RWMutex
	createReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}
	createReplicationGroupWithContextReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	DeleteCacheParameterGroupWithContextStub        func(context.Context, *elasticache.DeleteCacheParameterGroupInput, ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupWithContextMutex       sync.RWMutex
	deleteCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}
	deleteCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteReplicationGroupWithContextStub        func(context.Context, *elasticache.DeleteReplicationGroupInput, ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupWithContextMutex       sync.RWMutex
	deleteReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}
	deleteReplicationGroupWithContextReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DescribeCacheClustersWithContextStub        func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersWithContextMutex       sync.RWMutex
	describeCacheClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}
	describeCacheClustersWithContextReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheParametersWithContextStub        func(context.Context, *elasticache.DescribeCacheParametersInput, ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersWithContextMutex       sync.RWMutex
	describeCacheParametersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}
	describeCacheParametersWithContextReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	DescribeReplicationGroupsWithContextStub        func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsWithContextMutex       sync.RWMutex
	describeReplicationGroupsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}
	describeReplicationGroupsWithContextReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeSnapshotsPagesWithContextStub        func(context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, ...request.Option) error
	describeSnapshotsPagesWithContextMutex       sync.RWMutex
	describeSnapshotsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTagsForResourceWithContextStub        func(context.Context, *elasticache.ListTagsForResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ModifyCacheParameterGroupWithContextStub        func(context.Context, *elasticache.ModifyCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupWithContextMutex       sync.RWMutex
	modifyCacheParameterGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}
	modifyCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ModifyReplicationGroupWithContextStub        func(context.Context, *elasticache.ModifyReplicationGroupInput, ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)
	modifyReplicationGroupWithContextMutex       sync.RWMutex
	modifyReplicationGroupWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}
	modifyReplicationGroupWithContextReturns struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	modifyReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	RemoveTagsFromResourceWithContextStub        func(context.Context, *elasticache.RemoveTagsFromResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	removeTagsFromResourceWithContextMutex       sync.RWMutex
	removeTagsFromResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}
	removeTagsFromResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	removeTagsFromResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	TestFailoverWithContextStub        func(context.Context, *elasticache.TestFailoverInput, ...request.Option) (*elasticache.TestFailoverOutput, error)
	testFailoverWithContextMutex       sync.RWMutex
	testFailoverWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}
	testFailoverWithContextReturns struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	testFailoverWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElastiCache) AddTagsToResourceWithContext(arg1 context.Context, arg2 *elasticache.AddTagsToResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceWithContextReturnsOnCall[len(fake.addTagsToResourceWithContextArgsForCall)]
	fake.addTagsToResourceWithContextArgsForCall = append(fake.addTagsToResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.AddTagsToResourceWithContextStub
	fakeReturns := fake.addTagsToResourceWithContextReturns
	fake.recordInvocation("AddTagsToResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsToResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) AddTagsToResourceWithContextCallCount() int {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return len(fake.addTagsToResourceWithContextArgsForCall)
}

func (fake *FakeElastiCache) AddTagsToResourceWithContextCalls(stub func(context.Context, *elasticache.AddTagsToResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = stub
}

func (fake *FakeElastiCache) AddTagsToResourceWithContextArgsForCall(i int) (context.Context, *elasticache.AddTagsToResourceInput, []request.Option) {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	argsForCall := fake.addTagsToResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) AddTagsToResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	fake.addTagsToResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) AddTagsToResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	defer fake.addTagsToResourceWithContextMutex.Unlock()
	fake.AddTagsToResourceWithContextStub = nil
	if fake.addTagsToResourceWithContextReturnsOnCall == nil {
		fake.addTagsToResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.addTagsToResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupWithContextReturnsOnCall[len(fake.createCacheParameterGroupWithContextArgsForCall)]
	fake.createCacheParameterGroupWithContextArgsForCall = append(fake.createCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateCacheParameterGroupWithContextStub
	fakeReturns := fake.createCacheParameterGroupWithContextReturns
	fake.recordInvocation("CreateCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextCallCount() int {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.createCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.CreateCacheParameterGroupInput, ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateCacheParameterGroupInput, []request.Option) {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.createCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = nil
	fake.createCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	defer fake.createCacheParameterGroupWithContextMutex.Unlock()
	fake.CreateCacheParameterGroupWithContextStub = nil
	if fake.createCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.createCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.CreateReplicationGroupInput, arg3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupWithContextReturnsOnCall[len(fake.createReplicationGroupWithContextArgsForCall)]
	fake.createReplicationGroupWithContextArgsForCall = append(fake.createReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.CreateReplicationGroupWithContextStub
	fakeReturns := fake.createReplicationGroupWithContextReturns
	fake.recordInvocation("CreateReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextCallCount() int {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return len(fake.createReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.CreateReplicationGroupInput, ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.CreateReplicationGroupInput, []request.Option) {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.createReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = nil
	fake.createReplicationGroupWithContextReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	defer fake.createReplicationGroupWithContextMutex.Unlock()
	fake.CreateReplicationGroupWithContextStub = nil
	if fake.createReplicationGroupWithContextReturnsOnCall == nil {
		fake.createReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupWithContextReturnsOnCall[len(fake.deleteCacheParameterGroupWithContextArgsForCall)]
	fake.deleteCacheParameterGroupWithContextArgsForCall = append(fake.deleteCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteCacheParameterGroupWithContextStub
	fakeReturns := fake.deleteCacheParameterGroupWithContextReturns
	fake.recordInvocation("DeleteCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextCallCount() int {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteCacheParameterGroupInput, ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteCacheParameterGroupInput, []request.Option) {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = nil
	fake.deleteCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	defer fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	fake.DeleteCacheParameterGroupWithContextStub = nil
	if fake.deleteCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.DeleteReplicationGroupInput, arg3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupWithContextReturnsOnCall[len(fake.deleteReplicationGroupWithContextArgsForCall)]
	fake.deleteReplicationGroupWithContextArgsForCall = append(fake.deleteReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DeleteReplicationGroupWithContextStub
	fakeReturns := fake.deleteReplicationGroupWithContextReturns
	fake.recordInvocation("DeleteReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextCallCount() int {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return len(fake.deleteReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.DeleteReplicationGroupInput, ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.DeleteReplicationGroupInput, []request.Option) {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = nil
	fake.deleteReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	defer fake.deleteReplicationGroupWithContextMutex.Unlock()
	fake.DeleteReplicationGroupWithContextStub = nil
	if fake.deleteReplicationGroupWithContextReturnsOnCall == nil {
		fake.deleteReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersWithContextReturnsOnCall[len(fake.describeCacheClustersWithContextArgsForCall)]
	fake.describeCacheClustersWithContextArgsForCall = append(fake.describeCacheClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheClustersWithContextStub
	fakeReturns := fake.describeCacheClustersWithContextReturns
	fake.recordInvocation("DescribeCacheClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheClustersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextCallCount() int {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheClustersInput, ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = stub
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheClustersInput, []request.Option) {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = nil
	fake.describeCacheClustersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	defer fake.describeCacheClustersWithContextMutex.Unlock()
	fake.DescribeCacheClustersWithContextStub = nil
	if fake.describeCacheClustersWithContextReturnsOnCall == nil {
		fake.describeCacheClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContext(arg1 context.Context, arg2 *elasticache.DescribeCacheParametersInput, arg3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersWithContextReturnsOnCall[len(fake.describeCacheParametersWithContextArgsForCall)]
	fake.describeCacheParametersWithContextArgsForCall = append(fake.describeCacheParametersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeCacheParametersWithContextStub
	fakeReturns := fake.describeCacheParametersWithContextReturns
	fake.recordInvocation("DescribeCacheParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheParametersWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextCallCount() int {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextCalls(stub func(context.Context, *elasticache.DescribeCacheParametersInput, ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = stub
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeCacheParametersInput, []request.Option) {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	argsForCall := fake.describeCacheParametersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = nil
	fake.describeCacheParametersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	defer fake.describeCacheParametersWithContextMutex.Unlock()
	fake.DescribeCacheParametersWithContextStub = nil
	if fake.describeCacheParametersWithContextReturnsOnCall == nil {
		fake.describeCacheParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContext(arg1 context.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsWithContextReturnsOnCall[len(fake.describeReplicationGroupsWithContextArgsForCall)]
	fake.describeReplicationGroupsWithContextArgsForCall = append(fake.describeReplicationGroupsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeReplicationGroupsWithContextStub
	fakeReturns := fake.describeReplicationGroupsWithContextReturns
	fake.recordInvocation("DescribeReplicationGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReplicationGroupsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextCallCount() int {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextCalls(stub func(context.Context, *elasticache.DescribeReplicationGroupsInput, ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = stub
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeReplicationGroupsInput, []request.Option) {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeReplicationGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = nil
	fake.describeReplicationGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	defer fake.describeReplicationGroupsWithContextMutex.Unlock()
	fake.DescribeReplicationGroupsWithContextStub = nil
	if fake.describeReplicationGroupsWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContext(arg1 context.Context, arg2 *elasticache.DescribeSnapshotsInput, arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesWithContextReturnsOnCall[len(fake.describeSnapshotsPagesWithContextArgsForCall)]
	fake.describeSnapshotsPagesWithContextArgsForCall = append(fake.describeSnapshotsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeSnapshotsPagesWithContextStub
	fakeReturns := fake.describeSnapshotsPagesWithContextReturns
	fake.recordInvocation("DescribeSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSnapshotsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextCallCount() int {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextCalls(stub func(context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, ...request.Option) error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = stub
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextArgsForCall(i int) (context.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextReturns(result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	fake.describeSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	if fake.describeSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCache) ListTagsForResourceWithContext(arg1 context.Context, arg2 *elasticache.ListTagsForResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ListTagsForResourceWithContextStub
	fakeReturns := fake.listTagsForResourceWithContextReturns
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextCalls(stub func(context.Context, *elasticache.ListTagsForResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *elasticache.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupWithContextReturnsOnCall[len(fake.modifyCacheParameterGroupWithContextArgsForCall)]
	fake.modifyCacheParameterGroupWithContextArgsForCall = append(fake.modifyCacheParameterGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyCacheParameterGroupWithContextStub
	fakeReturns := fake.modifyCacheParameterGroupWithContextReturns
	fake.recordInvocation("ModifyCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextCallCount() int {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = stub
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyCacheParameterGroupInput, []request.Option) {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyCacheParameterGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = nil
	fake.modifyCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	defer fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	fake.ModifyCacheParameterGroupWithContextStub = nil
	if fake.modifyCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContext(arg1 context.Context, arg2 *elasticache.ModifyReplicationGroupInput, arg3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupWithContextReturnsOnCall[len(fake.modifyReplicationGroupWithContextArgsForCall)]
	fake.modifyReplicationGroupWithContextArgsForCall = append(fake.modifyReplicationGroupWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.ModifyReplicationGroupWithContextStub
	fakeReturns := fake.modifyReplicationGroupWithContextReturns
	fake.recordInvocation("ModifyReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReplicationGroupWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContextCallCount() int {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	return len(fake.modifyReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContextCalls(stub func(context.Context, *elasticache.ModifyReplicationGroupInput, ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = stub
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContextArgsForCall(i int) (context.Context, *elasticache.ModifyReplicationGroupInput, []request.Option) {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	argsForCall := fake.modifyReplicationGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContextReturns(result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = nil
	fake.modifyReplicationGroupWithContextReturns = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	defer fake.modifyReplicationGroupWithContextMutex.Unlock()
	fake.ModifyReplicationGroupWithContextStub = nil
	if fake.modifyReplicationGroupWithContextReturnsOnCall == nil {
		fake.modifyReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContext(arg1 context.Context, arg2 *elasticache.RemoveTagsFromResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceWithContextReturnsOnCall[len(fake.removeTagsFromResourceWithContextArgsForCall)]
	fake.removeTagsFromResourceWithContextArgsForCall = append(fake.removeTagsFromResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.RemoveTagsFromResourceWithContextStub
	fakeReturns := fake.removeTagsFromResourceWithContextReturns
	fake.recordInvocation("RemoveTagsFromResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsFromResourceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContextCallCount() int {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return len(fake.removeTagsFromResourceWithContextArgsForCall)
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContextCalls(stub func(context.Context, *elasticache.RemoveTagsFromResourceInput, ...request.Option) (*elasticache.TagListMessage, error)) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = stub
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContextArgsForCall(i int) (context.Context, *elasticache.RemoveTagsFromResourceInput, []request.Option) {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	argsForCall := fake.removeTagsFromResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	fake.removeTagsFromResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) RemoveTagsFromResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	defer fake.removeTagsFromResourceWithContextMutex.Unlock()
	fake.RemoveTagsFromResourceWithContextStub = nil
	if fake.removeTagsFromResourceWithContextReturnsOnCall == nil {
		fake.removeTagsFromResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.removeTagsFromResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) TestFailoverWithContext(arg1 context.Context, arg2 *elasticache.TestFailoverInput, arg3 ...request.Option) (*elasticache.TestFailoverOutput, error) {
	fake.testFailoverWithContextMutex.Lock()
	ret, specificReturn := fake.testFailoverWithContextReturnsOnCall[len(fake.testFailoverWithContextArgsForCall)]
	fake.testFailoverWithContextArgsForCall = append(fake.testFailoverWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.TestFailoverWithContextStub
	fakeReturns := fake.testFailoverWithContextReturns
	fake.recordInvocation("TestFailoverWithContext", []interface{}{arg1, arg2, arg3})
	fake.testFailoverWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeElastiCache) TestFailoverWithContextCallCount() int {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	return len(fake.testFailoverWithContextArgsForCall)
}

func (fake *FakeElastiCache) TestFailoverWithContextCalls(stub func(context.Context, *elasticache.TestFailoverInput, ...request.Option) (*elasticache.TestFailoverOutput, error)) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = stub
}

func (fake *FakeElastiCache) TestFailoverWithContextArgsForCall(i int) (context.Context, *elasticache.TestFailoverInput, []request.Option) {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	argsForCall := fake.testFailoverWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeElastiCache) TestFailoverWithContextReturns(result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = nil
	fake.testFailoverWithContextReturns = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) TestFailoverWithContextReturnsOnCall(i int, result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.testFailoverWithContextMutex.Lock()
	defer fake.testFailoverWithContextMutex.Unlock()
	fake.TestFailoverWithContextStub = nil
	if fake.testFailoverWithContextReturnsOnCall == nil {
		fake.testFailoverWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TestFailoverOutput
			result2 error
		})
	}
	fake.testFailoverWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeElastiCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.ElastiCache = new(FakeElastiCache)
